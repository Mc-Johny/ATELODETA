import asyncio
import string
import requests
import comments
import config
import random
import messages
import aiosqlite
import transactions
from vkbottle import Bot, Message, User
from vkbottle.api.keyboard import keyboard_gen
from vkbottle.keyboard import Text, Keyboard

bot = Bot(config.token)
user = User(config.acces_token)
qiwi = transactions.Qiwi()


def random_gen():
    string = random.randint(0, 1000000)
    return string


async def check_or_register_user(user_id: int):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–æ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
    """
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    await cursor.execute(f'SELECT user_id FROM Users WHERE user_id = {user_id}')
    res = await cursor.fetchone()
    if res is None:
        cursor = await conn.cursor()
        await cursor.execute('INSERT INTO Users(user_id)'
                             'VALUES (?)', (user_id,))
        await conn.commit()
        await cursor.close()
    await cursor.close()


async def get_profile(user_id: int):
    """
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ–≥–æ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ.
    :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ê –∏–º–µ–Ω–Ω–æ: –µ–≥–æ –±–∞–ª–∞–Ω—Å,
                                                  –Ω–∏–∫–Ω–µ–π–º,
                                                  –∫–æ–ª-–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤,
                                                  –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞,
                                                  –∫–æ–ª-–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π

    """
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    await cursor.execute(
        f'SELECT balance, nickname, buy_ticket, qiwi_number, wins FROM Users WHERE user_id = {user_id}'
    )
    res = await cursor.fetchone()
    await cursor.close()
    return res


async def editProfile(user_id, value, column):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ value –≤ –∫–æ–ª–æ–Ω–∫–µ column
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ–≥–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
    :param value: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç
    :param column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    await cursor.execute(f'UPDATE Users SET \'{column}\' = \'{value}\' WHERE user_id = {user_id}')
    await conn.commit()
    await cursor.close()


async def balanceManipulation(user_id, act, amount):
    """
    :param user_id
    :param act
    :param amount
    :type user_id: int
    :type act: str
    :type amount: int
    """
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    if act == 'pay':
        await cursor.execute(f'UPDATE Users SET balance=balance+{amount} WHERE user_id = {user_id}')
        await conn.commit()
        await cursor.close()
    elif act == 'withdraw':
        await cursor.execute(f'UPDATE Users SET balance=balance-{amount} WHERE user_id = {user_id}')
        await conn.commit()
        await cursor.close()


async def checkTable(tableName):
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    await cursor.execute(f'SELECT count(*) FROM sqlite_master WHERE type=\'table\' AND name=\'{tableName}\'')
    res = await cursor.fetchone()
    await cursor.close()
    return bool(res[0])


async def createTable(tableName):
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    await cursor.execute(f'CREATE TABLE IF NOT EXISTS {tableName} '
                         f'(billId	TEXT,'
                         f' amount INTEGER)')
    await cursor.close()


async def forTransaction(tableName, act, billId=None, amount=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ billId, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞,
    –∞ —Ç–∞–∫ –∂–µ –æ—Ç–º–µ–Ω—è—Ç—å —Å—á–µ—Ç.
    :param amount: –ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param act: –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: insert, pull
    :param tableName: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    :param billId: id —Å—á–µ—Ç–∞
    :return –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π billId, –µ—Å–ª–∏ –≤ act —É–∫–∞–∑–∞–Ω–æ pull
    """
    conn = await aiosqlite.connect('Database/database.db')
    cursor = await conn.cursor()
    if act == 'insert':
        await cursor.execute(f'INSERT INTO \'{tableName}\'(billId, amount) VALUES (?, ?)', (billId, amount,))
        await conn.commit()
    elif act == 'pull':
        await cursor.execute(f'SELECT * FROM \'{tableName}\'')
        res = await cursor.fetchall()
        await cursor.close()
        return res[-1]


async def create_keyboard(text=None, user_id=None):
    keyboard = Keyboard(one_time=True, inline=False)
    if text == 'help':
        keyboard.add_row()
        keyboard.add_button(Text('–ü–æ–º–æ—â—å'), color='negative')
        return keyboard.generate()
    elif text == 'to_menu':
        keyboard.add_row()
        keyboard.add_button(Text('–ú–µ–Ω—é'), color='negative')
        return keyboard.generate()
    elif text == '–º–µ–Ω—é':
        keyboard.add_row()
        keyboard.add_button(Text('–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–ü—Ä–æ—à–µ–¥—à–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–ü—Ä–æ—Ñ–∏–ª—å'), color='secondary')
        keyboard.add_row()
        keyboard.add_button(Text('–°–≤—è–∑–∞—Ç—å—Å—è'), color='secondary')
        keyboard.add_row()
        keyboard.add_button(Text('–ü–æ–º–æ—â—å'), color='negative')
        if user_id in config.admins:
            keyboard.add_row()
            keyboard.add_button(Text('Admin panelüîí'), color='primary')
        return keyboard.generate()
    elif text == '–ø—Ä–æ—Ñ–∏–ª—å':
        _, nickname, _, qiwi_number, _ = await get_profile(user_id)
        keyboard.add_row()
        keyboard.add_button(Text('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'), color='positive')
        keyboard.add_row()
        keyboard.add_button(Text('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤'), color='positive')
        keyboard.add_row()
        keyboard.add_button(Text('–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–ú–µ–Ω—é'), color='negative')
        return keyboard.generate()
    elif text == 'cancel_transaction':
        keyboard.add_row()
        keyboard.add_button(Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'), color='positive')
        keyboard.add_button(Text('–û—Ç–º–µ–Ω–∏—Ç—å'), color='negative')
        return keyboard.generate()
    elif text == 'edit':
        keyboard = Keyboard(one_time=False, inline=True)
        keyboard.add_row()
        keyboard.add_button(Text('–ü—Ä–æ—Ñ–∏–ª—å'), color='secondary')
        keyboard.add_row()
        keyboard.add_button(Text('–ú–µ–Ω—é'), color='negative')
        return keyboard.generate()
    elif text == 'admin panelüîí' and user_id in config.admins:
        keyboard.add_row()
        keyboard.add_button(Text('–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', payload='add_raffle'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–†–∞—Å—Å—ã–ª–∫–∞'), color='primary')
        keyboard.add_row()
        keyboard.add_button(Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö'), color='primary')
        keyboard.add_row()


@bot.on.message()
async def message(ans: Message):
    if ans.payload == '{\"command\":\"start\"}':
        await ans(
            random.choice(messages.greeting),
            keyboard=await create_keyboard('help')
        )
    await check_or_register_user(ans.from_id)
    await ans(
        '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ª—É—á—à–µ –≤ –º–µ–Ω—é.',
        keyboard=await create_keyboard('to_menu')
    )


@bot.on.message_handler(text='–ø–æ–º–æ—â—å', lower=True)
async def help_hendler(ans: Message):
    await ans(
        random.choice(messages.helping),
        keyboard=await create_keyboard('to_menu')
    )


@bot.on.message_handler(text='–º–µ–Ω—é', lower=True)
async def menu(ans: Message):
    await ans(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª.',
        keyboard=await create_keyboard(ans.text.lower(), ans.from_id)
    )


@bot.on.message_handler(text='–ø—Ä–æ—Ñ–∏–ª—å', lower=True)
async def profile(ans: Message):
    balance, nickname, buy_ticket, qiwi_number, wins = await get_profile(ans.from_id)
    str_qiwi = ''
    if qiwi_number == '–Ω–µ –∑–∞–¥–∞–Ω':
        qiwi_number += ' ‚úò'
        str_qiwi += '\n\n–¢–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞,' \
                    ' —Ç–æ –≤ —Å–ª—É—á–∞–µ –≤–∞—à–µ–π –ø–æ–±–µ–¥—ã –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã.\n' \
                    '–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ qiwi.com –∏ ' \
                    '–ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞—Ç—É—Å ¬´–û—Å–Ω–æ–≤–Ω–æ–π¬ª\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞' \
                    ' —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
    if nickname == '–Ω–µ –∑–∞–¥–∞–Ω':
        nickname += ' ‚úò'
    name = await bot.api.users.get(user_ids=ans.from_id)
    await ans(
        '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: ' + str(name[0].first_name) + ' ' + str(name[0].last_name) +
        '\n–ë–∞–ª–∞–Ω—Å: ' + str(balance) + ' —Ä—É–±.' +
        '\n–ù–∏–∫–Ω–µ–π–º: ' + nickname +
        '\n–ö—É–ø–ª–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ' + str(buy_ticket) +
        '\n –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI: +' + str(qiwi_number) +
        '\n–ü–æ–±–µ–¥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ' + str(wins) + str_qiwi,
        keyboard=await create_keyboard(ans.text.lower(), ans.from_id)
    )


@bot.on.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', lower=True)
async def payBalance1(ans: Message):
    await ans(
        '–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).'
        '\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10 —Ä—É–±.',
        keyboard=await create_keyboard('to_menu')
    )
    await bot.branch.add(ans.peer_id, 'Balance')


@bot.branch.simple_branch('Balance')
async def payBalance2(ans: Message):
    if ans.text.lower() == '–º–µ–Ω—é':
        await bot.branch.exit(ans.peer_id)
        await menu()
    if ans.text.isdigit() and int(ans.text) >= 10:
        await ans(
            f'–¢—ã —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ {ans.text} —Ä—É–±?\n'
            f'–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, —Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ.',
            keyboard=keyboard_gen(
                [
                    [{'text': '–ú–µ–Ω—é', 'color': 'negative'}, {'text': '–î–∞–ª–µ–µ', 'color': 'positive'}]
                ],
                inline=True
            )
        )
        await bot.branch.exit(ans.peer_id)
        await bot.branch.add(ans.peer_id, 'payBalance', amount=int(ans.text))
    else:
        await ans(
            f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n'
            f'–í–æ—Ç —Ç–µ–±–µ —Å–æ–≤–µ—Ç:\n'
            f'  ‚Ä¢–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ\n'
            f'  ‚Ä¢–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏ –±–µ–∑ –≤—Å—è–∫–∏—Ö –∑–Ω–∞–∫–æ–≤\n'
            f'  ‚Ä¢–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 10\n'
            f'–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –≤–≤–µ–¥–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.',
            keyboard=await create_keyboard('to_menu')
        )


@bot.branch.simple_branch('payBalance')
async def payBalance3(ans: Message, amount):
    tableName = f'transaction_{ans.peer_id}'
    if ans.text.lower() == '–º–µ–Ω—é':
        await bot.branch.exit(ans.peer_id)
        await menu(ans)
    elif ans.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        billId, _ = await forTransaction(tableName, 'pull')
        await qiwi.reject(billId)
        await ans(
            '–°—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n'
            '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
        )
        await ans('–ü—Ä–æ–∏–∑–≤–æ–∂—É –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é.')
        await bot.branch.exit(ans.peer_id)
        await asyncio.sleep(1)
        # TODO: –°—Ç–æ–∏—Ç —ç—Ç–æ –º–µ—Å—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
        await ans(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª.',
            keyboard=keyboard_gen(
                [
                    [{'text': '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', 'color': 'primary'}],
                    [{'text': '–ü—Ä–æ—à–µ–¥—à–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏', 'color': 'primary'}],
                    [{'text': '–ü—Ä–æ—Ñ–∏–ª—å', 'color': 'secondary'}],
                    [{'text': '–°–≤—è–∑–∞—Ç—å—Å—è', 'color': 'secondary'}],
                    [{'text': '–ü–æ–º–æ—â—å', 'color': 'negative'}]
                ],
                one_time=True,
                inline=False
            )
        )
    elif ans.text.lower() == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å':
        billId, _ = await forTransaction(tableName, 'pull')
        status = await qiwi.status(billId)
        if status == 'WAITING':
            await ans(
                '–¢—ã –µ—â–µ –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–ª –º–Ω–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏.\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞,'
                ' –∫–æ–≥–¥–∞ —Ç—ã –æ–ø–ª–∞—Ç–∏—à—å –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±–µ —É–∂–µ —Å–∫–∏–¥—ã–≤–∞–ª.',
                keyboard=keyboard_gen(
                    [
                        [{'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'color': 'negative'}, {'text': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'color': 'positive'}]
                    ],
                    inline=True
                )
            ),
        elif status == 'PAID':
            _, count = await forTransaction(tableName, 'pull')
            await balanceManipulation(ans.from_id, 'pay', count)
            await ans(
                '–û—Ç–ª–∏—á–Ω–æ!\n'
                '–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å —Ç–∏–∫–µ—Ç—ã.',
                keyboard=await create_keyboard('to_menu')
            )
    elif ans.text.lower() == '–¥–∞–ª–µ–µ':
        await createTable(tableName)
        billId = lambda: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(10))
        billId = str(billId())
        amount = amount
        comment = comments.random_comment()
        await forTransaction(tableName, 'insert', billId, amount)
        payUrl = await qiwi.payBalance(
            billId,
            amount,
            f'–°—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n'
            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}'
        )
        shortUrl = requests.get('https://clck.ru/--?url=' + payUrl).text
        await ans(
            f'–°–æ—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ {payUrl}'
            f' –∏ –ø–æ–ø–æ–ª–Ω–∏ —Å—á–µ—Ç, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.'
            f'\n–ò –¥–∞. –ù–µ –∑–∞–±—É–¥—å —Å–≤–µ—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ. –î–ª—è —Ç–µ–±—è –æ–Ω –≤–æ—Ç: {comment}.',
            keyboard=keyboard_gen(
                [
                    [{'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'color': 'negative'}, {'text': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'color': 'positive'}]
                ],
                inline=True
            )
        )
    else:
        if not await checkTable(tableName):
            await payBalance2(ans)
        if await checkTable(tableName):
            await ans(
                f'–ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Ç–æ—Ç –≤–∞—à {ans.text}?\n'
                f'–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n–ù–∏–∂–µ —è –ø—Ä–∏–∫—Ä–µ–ø–∏–ª –∫–Ω–æ–ø–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–æ—á–Ω–æ —Ç–µ–±–µ –æ—Ç–≤–µ—á—É.',
                keyboard=keyboard_gen(
                    [
                        [{'text': '–û—Ç–º–µ–Ω–∏—Ç—å', 'color': 'negative'}, {'text': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'color': 'positive'}]
                    ],
                    inline=True
                )
            )


@bot.on.message_handler(text='–¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', lower=True)
async def editNumber(ans: Message):
    await ans(
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–∑ QIWI –∫–æ—à–µ–ª—å–∫–∞(–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ QIWI), –∫—É–¥–∞ –ø—Ä–∏–¥—É—Ç '
        '–¥–µ–Ω—å–≥–∏ –≤ —Å–ª—É—á–∞–µ —Ç–≤–æ–µ–π –ø–æ–±–µ–¥—ã.\n–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7, –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–∫–æ–≤, '
        '–¥–ª–∏–Ω–∞ 11 —Ü–∏—Ñ—Ä.\n–ü—Ä–∏–º–µ—Ä: 7900500333123',
        keyboard=await create_keyboard('edit')
    )
    await bot.branch.add(ans.peer_id, 'editNumber')


@bot.branch.simple_branch('editNumber')
async def branchEditNumber(ans: Message):
    if ans.text.isdigit() and len(ans.text) == 11 and ans.text.startswith('7'):
        await editProfile(ans.from_id, ans.text, 'qiwi_number')
        await ans(
            '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
            keyboard=await create_keyboard('edit')
        )
        await bot.branch.exit(ans.peer_id)

    else:
        await ans(
            '–ù–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π!\n–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω:\n‚Ä¢–°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 7(–±–µ–∑ +)\n‚Ä¢–î–ª–∏–Ω–∞ 11 —Ü–∏—Ñ—Ä.',
            keyboard=await create_keyboard('edit')
        )

    if ans.text.lower() == '–º–µ–Ω—é':
        await bot.branch.exit(ans.peer_id)
        await menu()

    if ans.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—å':
        await bot.branch.exit(ans.peer_id)
        await profile(ans)


@bot.on.message_handler(text='–¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', lower=True)
async def editNickname(ans: Message):
    await ans(
        '–ù–∞–ø–∏—à–∏ –Ω–∏–∫–Ω–µ–π–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n–ù–∏–∫–Ω–µ–π–º –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º, –≤ —Å–ª—É—á–∞–µ —Ç–≤–æ–µ–π –ø–æ–±–µ–¥—ã.\n'
        '–ù–µ —Å—Ç–æ–∏—Ç –≤—ã–ø–µ–Ω–¥—Ä–∏–≤–∞—Ç—å—Å—è —Å–æ –≤—Å—è—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —à—Ä–∏—Ñ—Ç–∞–º–∏(ùëíùìçùí∂ùìÇùìÖùìÅùëí - –ø–ª–æ—Ö–æ–π –ø—Ä–∏–º–µ—Ä).\n–ù–µ —É –≤—Å–µ—Ö –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ' –ø–æ–¥–æ–±–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤. –ß–µ–º –ø—Ä–æ—â–µ, —Ç–µ–º –ª—É—á—à–µ.\n–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–µ–±–µ –Ω–∏–∫, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è'
        ' —Å–∞–π—Ç–æ–º https://nick-name.ru/ru/generate\n–î–µ–π—Å—Ç–≤—É–π!',
        keyboard=await create_keyboard('edit')
    )
    await bot.branch.add(ans.peer_id, 'editNickname')


@bot.branch.simple_branch('editNickname')
async def branchEditNickname(ans: Message):
    await editProfile(ans.from_id, ans.text, 'nickname')
    await ans(
        '–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',
        keyboard=await create_keyboard('edit')
    )
    await bot.branch.exit(ans.peer_id)
    if ans.text.lower() == '–º–µ–Ω—é':
        await bot.branch.exit(ans.peer_id)
        await menu()

    if ans.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—å':
        await bot.branch.exit(ans.peer_id)
        await profile(ans)


@bot.on.message_handler(text='—Å–≤—è–∑–∞—Ç—å—Å—è', lower=True)
async def contact(ans: Message):
    await ans(
        '–ï—Å–ª–∏ —É —Ç–µ–±—è —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, —Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n'
        '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ: https://vk.cc/avIrel\n'
        '–î—É–º–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–¥–µ—Ç.\n'
        '–ù–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://vk.cc/avIrbJ',
        keyboard=await create_keyboard('to_menu')
    )


bot.run_polling(skip_updates=False)
